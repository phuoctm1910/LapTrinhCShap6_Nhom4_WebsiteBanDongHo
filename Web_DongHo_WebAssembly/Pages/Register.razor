@page "/signup"
@inject HttpClient HttpClient
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Đăng Ký</h3>

<div class="form-group">
    <label for="fullName">Full Name</label>
    <input type="text" class="form-control" @bind="@user.FullName" id="fullName" />
</div>

<div class="form-group">
    <label for="userName">Username</label>
    <input type="text" class="form-control" @bind="@user.UserName" id="userName" />
</div>

<div class="form-group">
    <label for="password">Password</label>
    <input type="password" class="form-control" @bind="@user.Password" id="password" />
</div>

<div class="input-group">
    <label>Gender</label>
    <div>
        <input type="radio" id="male" name="gender" value="true" @onchange="() => user.Gender = true" checked="@user.Gender" />
        <label for="male">Male</label>
    </div>
    <div>
        <input type="radio" id="female" name="gender" value="false" @onchange="() => user.Gender = false" checked="!user.Gender" />
        <label for="female">Female</label>
    </div>
</div>

<div class="form-group">
    <label for="phoneNumber">Phone Number</label>
    <input type="text" class="form-control" @bind="@user.PhoneNumber" id="phoneNumber" />
</div>

<div class="form-group">
    <label for="birthDate">Birth Date</label>
    <input type="date" class="form-control" @bind="@user.BirthDate" id="birthDate" />
</div>

<button class="btn btn-primary" @onclick="RegisterUser">Register</button>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div class="toast fade" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Thông báo</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            @toastMessage
        </div>
    </div>
</div>

@code {
    private UserRegistrationRequest user = new UserRegistrationRequest();
    private string toastMessage = string.Empty;

    // Hàm gửi request đến api
    private async Task RegisterUser()
    {
        // Gửi request đến api/resigter cùng với gói dữ liệu user
        var response = await HttpClient.PostAsJsonAsync<UserRegistrationRequest>("api/Account/register", user);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<RegistrationResponse>();
            toastMessage = "Registration successful!";
            ShowToast();

            // Auto-login
            await AutoLogin(result.Token);
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            toastMessage = errorResponse?.Message ?? "An unknown error occurred.";
            ShowToast();
        }
    }

    // Thêm vào @toastMessage trên kia
    private void ShowToast()
    {
        // Xem này như 1 javascript
        JS.InvokeVoidAsync("eval", "var toastElement = document.querySelector('.toast'); var toast = new bootstrap.Toast(toastElement); toast.show();");
    }

    // Auto-login function
    private async Task AutoLogin(string token)
    {
        var loginRequest = new LoginRequest { Token = token };
        var response = await HttpClient.PostAsJsonAsync<LoginRequest>("api/Account/auto-login", loginRequest);
        if (response.IsSuccessStatusCode)
        {
            var loginResponse = await response.Content.ReadFromJsonAsync<RegistrationResponse>();
            // Lưu trữ token và chuyển hướng đến trang chính
            // Thêm mã lưu trữ token và điều hướng đến trang mong muốn
            toastMessage = "Auto-login successful!";
            ShowToast();

            // Ví dụ điều hướng
            Navigation.NavigateTo("/Home");
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            toastMessage = errorResponse?.Message ?? "Auto-login failed.";
            ShowToast();
        }
    }

    // Tạo Model để gửi đến api vì chuyển qua xem api thì sẽ thấy nó yêu cầu [FromBody]
    public class UserRegistrationRequest
    {
        public string FullName { get; set; }
        public bool Gender { get; set; }
        public string PhoneNumber { get; set; }
        public string UserName { get; set; }
        public string Password { get; set; }
        public DateTime BirthDate { get; set; }
    }

    // Model tình trạng Đăng ký
    public class RegistrationResponse
    {
        public string Token { get; set; }
        public string UserName { get; set; }
        public int RoleId { get; set; }
    }

    // Model thông báo lỗi
    public class ErrorResponse
    {
        public string Message { get; set; }
    }

    // Model yêu cầu đăng nhập
    public class LoginRequest
    {
        public string Token { get; set; }
    }
}
