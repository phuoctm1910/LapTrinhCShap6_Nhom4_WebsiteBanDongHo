@page "/admin/addProduct"
@using Web_DongHo_WebAssembly.Models
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation
@layout AdminLayout

@using Newtonsoft.Json
<EditForm Model="product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Mã Sản Phẩm:</label>
        <InputText id="ProductCode" @bind-Value="product.ProductCode" required />
    </div>

    <div>
        <label>Tên Sản Phẩm:</label>
        <InputText id="ProductName" @bind-Value="product.ProductName" required />
    </div>

    <div>
        <label>Ảnh Sản Phẩm:</label>
        <InputFile OnChange="HandleFilesSelected" multiple />
    </div>

    <div>
        <label>Số lượng Sản Phẩm:</label>
        <InputNumber id="ProductStock" @bind-Value="product.ProductStock" required />
    </div>

    <div>
        <label>Giá Sản Phẩm:</label>
        <InputNumber id="ProductPrice" @bind-Value="product.ProductPrice" required />
    </div>

    <div>
        <label>Loại đồng hồ dành cho:</label>
        <InputSelect id="CategoryId" @bind-Value="product.CategoryId" required>
            <option value="-1">Dành cho</option>
            @foreach (var category in listCategory)
            {
                <option value="@category.CategoryId">@category.CategoryName</option>
            }
        </InputSelect>
    </div>

    <div>
        <label>Thương hiệu đồng hồ:</label>
        <InputSelect id="BrandId" @bind-Value="product.BrandId" required>
            <option value="-1">Chọn thương hiệu</option>
            @foreach (var brand in listBrand)
            {
                <option value="@brand.BrandId">@brand.BrandName</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label for="Origin" class="col-form-label">Xuất xứ:</label>
        <InputText id="Origin" @bind-Value="product.Origin" class="form-control" required pattern="^[A-Za-zÀ-ỹ][A-Za-zÀ-ỹ\s]*[A-Za-zÀ-ỹ]$" title="Chỉ được điền tên tiếng Việt và không kết thúc bằng dấu cách" />
    </div>

    <div class="mb-3">
        <label for="MachineType" class="col-form-label">Loại máy:</label>
        <InputSelect id="MachineType" @bind-Value="product.MachineType" class="form-control" required>
            <option value="-1" disabled selected>Chọn loại máy</option>
            <option value="Pin (Quartz)">Pin (Quartz)</option>
            <option value="Cơ tự động (Automatic)">Cơ tự động (Automatic)</option>
            <option value="Năng lượng ánh sáng (Eco-Drive)">Năng lượng ánh sáng (Eco-Drive)</option>
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="Diameter" class="col-form-label">Đường kính:</label>
        <div class="input-group">
            <InputNumber id="Diameter" @bind-Value="product.Diameter" class="form-control" aria-describedby="diameter-addon" />
            <div class="input-group-append">
                <span class="input-group-text" id="diameter-addon">mm</span>
            </div>
        </div>
    </div>

    <div class="mb-3">
        <label for="ClockType" class="col-form-label">Loại đồng hồ:</label>
        <InputSelect id="ClockType" @bind-Value="product.ClockType" class="form-control" required>
            <option value="-1" disabled selected>Chọn loại động hồ</option>
            <option value="Dauphine">Dauphine</option>
            <option value="Baton">Baton</option>
            <option value="Leaf">Leaf</option>
            <option value="Alpha">Alpha</option>
            <option value="Stick">Stick</option>
            <option value="Arrow">Arrow</option>
            <option value="Sword">Sword</option>
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="Insurrance" class="col-form-label">Bảo hành:</label>
        <div class="input-group">
            <InputNumber id="Insurrance" @bind-Value="product.Insurrance" class="form-control" aria-describedby="insurrance-addon" />
            <div class="input-group-append">
                <span class="input-group-text" id="insurrance-addon">năm</span>
            </div>
        </div>
    </div>

    <div class="mb-3">
        <label for="Color" class="col-form-label">Màu mặt số:</label>
        <InputText id="Color" @bind-Value="product.Color" class="form-control" list="colorList" required data-toggle="tooltip" title="Chỉ được nhập các màu: Red, Green, Blue, Yellow, Black, White, Orange, Purple, Pink, Brown, Gray" />
        <datalist id="colorList">
            <option value="Red"></option>
            <option value="Green"></option>
            <option value="Blue"></option>
            <option value="Yellow"></option>
            <option value="Black"></option>
            <option value="White"></option>
            <option value="Orange"></option>
            <option value="Purple"></option>
            <option value="Pink"></option>
            <option value="Brown"></option>
            <option value="Gray"></option>
        </datalist>
    </div>

    <button type="submit">Xác nhận</button>
</EditForm>

<ul id="selectedImagesList">
    @foreach (var image in selectedImages)
    {
        <li>
            <img src="images/Product/@image" alt="Product Image" width="65" height="70" />
        </li>
    }
</ul>

@code {
    private ProductVM product = new();
    private List<Category> listCategory = new();
    private List<Brand> listBrand = new();
    private List<string> selectedImages = new();
    private List<IBrowserFile> filesToUpload = new();

    protected override async Task OnInitializedAsync()
    {
        await GetListCategory();
        await GetListBrand();
    }

    async Task GetListBrand()
    {
        try
        {
            var response = await Http.GetStringAsync("api/brand");
            listBrand = JsonConvert.DeserializeObject<List<Brand>>(response);
            if (listBrand == null)
            {
                await JS.InvokeVoidAsync("console.log", "Trống");
            }
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("console.log", e.Message);
        }
    }

    async Task GetListCategory()
    {
        try
        {
            var response = await Http.GetStringAsync("api/Category");
            listCategory = JsonConvert.DeserializeObject<List<Category>>(response);
            if (listCategory == null)
            {
                await JS.InvokeVoidAsync("console.log", "Trống");
            }
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("console.log", e.Message);
        }
    }

    private async Task HandleValidSubmit()
    {

        product.ProductImages = JsonConvert.SerializeObject(selectedImages);
        await JS.InvokeVoidAsync("console.log", product.ClockType);
        await JS.InvokeVoidAsync("console.log", product.MachineType);

        var response = await Http.PostAsJsonAsync("api/product", product);
        await UploadFiles();

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            // Handle error
        }
    }

    private void HandleFilesSelected(InputFileChangeEventArgs e)
    {
        filesToUpload = e.GetMultipleFiles().ToList();
        selectedImages.Clear();

        foreach (var file in filesToUpload)
        {
            var filePath = $"{file.Name}";
            selectedImages.Add(filePath);
        }
    }

    private async Task UploadFiles()
    {
        foreach (var file in filesToUpload)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(long.MaxValue));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            content.Add(fileContent, "file", file.Name);

            var response = await Http.PostAsync("api/upload", content);
            await JS.InvokeVoidAsync("console.log", content);

            if (!response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("console.log", "Up ảnh thất bại");
            }
        }
    }
}
