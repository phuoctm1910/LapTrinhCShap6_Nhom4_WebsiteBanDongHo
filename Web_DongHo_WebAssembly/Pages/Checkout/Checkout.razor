@page "/thanhtoan"
@using Web_DongHo_WebAssembly.Data
@using Web_DongHo_WebAssembly.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container mt-5">
    <h2>Thanh Toán</h2>
    <div class="row">
        <div class="col-md-8">
            <EditForm Model="orderModel" OnValidSubmit="CompletePurchase">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="fullName" class="form-label">Họ và Tên:</label>
                    <InputText id="fullName" class="form-control" @bind-Value="orderModel.FullName" @oninput="OnFormFieldChanged" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">Số điện thoại:</label>
                    <InputText id="phone" class="form-control" @bind-Value="orderModel.Phone" @oninput="OnFormFieldChanged" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Địa chỉ nhận hàng:</label>
                    <InputText id="address" class="form-control" @bind-Value="orderModel.Address" @oninput="OnFormFieldChanged" />
                </div>
                <div class="mb-3">
                    <label for="paymentMethod" class="form-label">Phương thức thanh toán:</label>
                    <div class="form-check">
                        <input type="radio" id="cash" class="form-check-input" name="paymentMethod" value="Cash" @onclick="() => SetPaymentMethod(Cash)" checked="@(!orderModel.PaymentMethod.Equals(Cash))" />
                        <label class="form-check-label" for="cash">Tiền Mặt</label>
                    </div>
                    <div class="form-check">
                        <input type="radio" id="paypal" class="form-check-input" name="paymentMethod" value="Paypal" @onclick="() => SetPaymentMethod(Paypal)" checked="@orderModel.PaymentMethod.Equals(Paypal)" />
                        <label class="form-check-label" for="paypal">Paypal</label>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary" id="complete">Hoàn thành đặt hàng</button>
            </EditForm>
        </div>
        <div class="col-md-4">
            <div class="row">
                <h4>Giỏ hàng của bạn<span class="badge bg-primary ">@totalQuantity</span></h4>
            </div>
            <ul class="list-group my-4">
                @foreach (var item in BillDetails)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <h6>@item.Product.ProductName</h6>
                            <small>@item.Quantity x @item.UnitPrice.ToString("#,##0").Replace(",", ".") ₫</small>
                        </div>
                        <span>@item.TotalPrice.ToString("#,##0").Replace(",", ".") ₫</span>
                    </li>
                }
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <p>Vận chuyển</p>
                    <p>@(TotalAmount - totalAllUnit == 15000 ? "Vận chuyển chậm - 15.000 ₫" : "Vận chuyển nhanh - 25.000 ₫")</p>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Total (VND)</span>
                    <strong>@TotalAmount.ToString("#,##0").Replace(",", ".") ₫</strong>
                </li>
            </ul>
            <div id="paypal-container" style="display: none;">
                <div id="paypal-button-container"></div>
            </div>
        </div>
    </div>
</div>

@code {
    private OrderModel orderModel = new OrderModel();
    private List<BillDetails> BillDetails = new List<BillDetails>();
    private int totalQuantity;
    private decimal totalAllUnit;
    private decimal TotalAmount;
    private const string Cash = "Cash";
    private const string Paypal = "Paypal";

    protected override async Task OnInitializedAsync()
    {
        BillDetails = await LoadBillDetails();
        totalQuantity = BillDetails.Sum(item => item.Quantity);
        totalAllUnit = BillDetails.Sum(item => item.TotalPrice);
        TotalAmount = totalAllUnit + CalculateShipping();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeCheckout", TotalAmount);
        }
    }

    private async Task<List<BillDetails>> LoadBillDetails()
    {
        // Replace with actual data fetching logic
        return new List<BillDetails>
    {
            new BillDetails { Product = new Product { ProductName = "Product 1" }, Quantity = 1, UnitPrice = 100000, TotalPrice = 100000 },
            new BillDetails { Product = new Product { ProductName = "Product 2" }, Quantity = 2, UnitPrice = 200000, TotalPrice = 400000 }
        };
    }

    private decimal CalculateShipping()
    {
        return 15000; // Replace with actual logic to calculate shipping
    }

    private async Task CompletePurchase()
    {
        await JSRuntime.InvokeVoidAsync("console.log", orderModel);
    }

    private void OnFormFieldChanged(ChangeEventArgs e)
    {
        Console.WriteLine("Form field changed");
        Console.WriteLine(orderModel);
        TogglePayPalButtonVisibility();
    }

    private void SetPaymentMethod(string method)
    {
        orderModel.PaymentMethod = method;
        Console.WriteLine($"Payment method changed to: {orderModel.PaymentMethod}");
        TogglePayPalButtonVisibility();
        JSRuntime.InvokeVoidAsync("console.log", orderModel.PaymentMethod);
    }

    private void TogglePayPalButtonVisibility()
    {
        bool isFormValid = !string.IsNullOrEmpty(orderModel.FullName) &&
                           !string.IsNullOrEmpty(orderModel.Phone) &&
                           !string.IsNullOrEmpty(orderModel.Address);

        Console.WriteLine($"Form valid: {isFormValid}, Payment Method: {orderModel.PaymentMethod}");
        if (isFormValid && orderModel.PaymentMethod == Paypal)
        {
            Console.WriteLine("Showing PayPal button");
            JSRuntime.InvokeVoidAsync("showPayPalButton");
        }
        else
        {
            Console.WriteLine("Hiding PayPal button");
            JSRuntime.InvokeVoidAsync("hidePayPalButton");
        }
    }

    public class OrderModel
    {
        public string FullName { get; set; }
        public string Phone { get; set; }
        public string Address { get; set; }
        public string PaymentMethod { get; set; } = "Cash";
    }
}




<style>
    .container {
        max-width: 1200px;
    }

    .cart-summary {
        background-color: #f9f9f9;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }
</style>