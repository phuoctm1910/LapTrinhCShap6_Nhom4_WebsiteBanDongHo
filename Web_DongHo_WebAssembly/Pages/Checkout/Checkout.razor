@page "/thanhtoan"
@using Web_DongHo_WebAssembly.Data
@using Web_DongHo_WebAssembly.Models
@using Microsoft.JSInterop;
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AuthState Auth
@inject NavigationManager Navigation

<div class="container my-5">
    <h2>Thanh Toán</h2>
    <div class="row">
        <div class="col-md-8">
            <EditForm Model="orderModel" OnValidSubmit="CompletePurchase">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="fullName" class="form-label">Họ và Tên:</label>
                    <InputText id="fullName" class="form-control" @bind-Value="orderModel.FullName" @oninput="OnFormFieldChanged" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">Số điện thoại:</label>
                    <InputText id="phone" class="form-control" @bind-Value="orderModel.Phone" @oninput="OnFormFieldChanged" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Địa chỉ nhận hàng:</label>
                    <InputText id="address" class="form-control" @bind-Value="orderModel.Address" @oninput="OnFormFieldChanged" />
                </div>
                <div class="mb-3">
                    <label for="paymentMethod" class="form-label">Phương thức thanh toán:</label>
                    <div class="form-check">
                        <input type="radio" id="cash" class="form-check-input" name="paymentMethod" value="Cash" @onclick="() => SetPaymentMethod(Cash)"  checked="@orderModel.PaymentMethod.Equals(Cash)" />
                        <label class="form-check-label" for="cash">Tiền Mặt</label>
                    </div>
                    <div class="form-check">
                        <input type="radio" id="paypal" class="form-check-input" name="paymentMethod" value="Paypal" @onclick="() => SetPaymentMethod(Paypal)" checked="@orderModel.PaymentMethod.Equals(Paypal)" />
                        <label class="form-check-label" for="paypal">Paypal</label>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary" id="complete">Đặt hàng</button>
            </EditForm>
        </div>
        <div class="col-md-4">
            @if (Auth.Username != null)
            {
                @if (checkout != null)
                {
                    <div class="row">
                        <h4>Giỏ hàng của bạn<span class="badge bg-primary">@checkout?.BillDetails.Count</span></h4>
                    </div>
                    <ul class="list-group my-4">
                        @foreach (var item in checkout.BillDetails)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <h6>@item.Product.ProductName</h6>
                                    <small>@item.Quantity x @item.UnitPrice.ToString("#,##0").Replace(",", ".") ₫</small>
                                </div>
                                <span>@item.TotalPrice.ToString("#,##0").Replace(",", ".") ₫</span>
                            </li>
                        }
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <p>Vận chuyển</p>
                            <p>@(shippingCost == 15000 ? "Vận chuyển chậm - 15.000 ₫" : "Vận chuyển nhanh - 25.000 ₫")</p>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>Total (VND)</span>
                            <strong>@checkout.TotalAmount.ToString("#,##0").Replace(",", ".") ₫</strong>
                        </li>
                    </ul>
                }
                <div id="paypal-container" style="display: none;">
                    <div id="paypal-button-container"></div>
                </div>
            }
            else
            {
                Navigation.NavigateTo("/");
            }
        </div>
    </div>
</div>

@code {
    public OrderModel orderModel = new OrderModel();
    public Bill checkout;
    public int shippingCost;
    public float LastTotalAmount;
    public const string Cash = "Cash";
    public const string Paypal = "Paypal";

    protected override async Task OnInitializedAsync()
    {
        await LoadCheckout();
        if (checkout != null)
        {
            await CalculateShippingCost();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Bạn chưa có sản phẩm nào trong giỏ hàng");
        }
    }

    private async Task LoadCheckout()
    {
        var username = Auth.Username;
        if (username != null)
        {
            try
            {
                var response = await Http.GetAsync($"api/Checkout/getBill?username={username}");
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    checkout = Newtonsoft.Json.JsonConvert.DeserializeObject<Bill>(responseContent);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Không thể tải giỏ hàng");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Lỗi: {ex.Message}");
            }
        }
        else
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task CalculateShippingCost()
    {
        if (checkout != null)
        {
            var totalAllUnit = checkout.BillDetails.Sum(bd => bd.TotalPrice);
            shippingCost = (int)(checkout.TotalAmount - totalAllUnit);
            await JSRuntime.InvokeVoidAsync("console.log", checkout.TotalAmount, totalAllUnit);
        }
    }

    private async Task CompletePurchase()
    {
        var response = await Http.PostAsJsonAsync($"api/Checkout/completePurchase?username={Auth.Username}", orderModel);
        if (response.IsSuccessStatusCode)
        {
            var isOk = await JSRuntime.InvokeAsync<bool>("showAlertAndConfirm", "Bạn đã thanh toán thành công");
            if (isOk)
            {
                Navigation.NavigateTo("/");
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Xảy ra lỗi khi thanh toán");
        }
    }

    private void OnFormFieldChanged(ChangeEventArgs e)
    {
        TogglePayPalButtonVisibility();
    }

    private void SetPaymentMethod(string method)
    {
        orderModel.PaymentMethod = method;
        TogglePayPalButtonVisibility();
    }

    private async void TogglePayPalButtonVisibility()
    {
        bool isFormValid = !string.IsNullOrEmpty(orderModel.FullName) &&
                           !string.IsNullOrEmpty(orderModel.Phone) &&
                           !string.IsNullOrEmpty(orderModel.Address);

        if (isFormValid && orderModel.PaymentMethod == Paypal)
        {
            JSRuntime.InvokeVoidAsync("showPayPalButton");
            PayPalPayment(checkout.TotalAmount);

        }
        else
        {
            JSRuntime.InvokeVoidAsync("hidePayPalButton");
        }
    }

    private void PayPalPayment(float total)
    {
        var orderModelSending = new OrderModel
        {
            FullName = orderModel.FullName,
            Phone = orderModel.Phone,
            Address = orderModel.Address,
            PaymentMethod = orderModel.PaymentMethod
        };
        int totalAmountInt = (int)Math.Round(total);
        JSRuntime.InvokeVoidAsync("initializeCheckout", totalAmountInt, Auth.Username, orderModelSending);

    }

    public class OrderModel
    {
        public string FullName { get; set; }
        public string Phone { get; set; }
        public string Address { get; set; }
        public string PaymentMethod { get; set; } = Cash;
    }
}

<style>
    .container {
        max-width: 1200px;
    }

    .cart-summary {
        background-color: #f9f9f9;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }
</style>
