@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthState AuthState
@inject HttpClient Http
@using System.IdentityModel.Tokens.Jwt;

<nav class="navbar navbar-expand-lg bg-white border @NavbarClass" style="padding: 0!important;">
    <div class="row container-fluid p-0">
        <a class="navbar-brand col-2 text-center" href="/">
            <img src="images/logo.png" alt="logo" width="100px">
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse col-7" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link nav-home" href="/about">Giới thiệu</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link nav-home" href="/contact">Liên hệ</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link nav-home" href="/product">Sản phẩm</a>
                </li>
            </ul>
            <form class="d-flex" role="search" style="width: 400px;">
                <div class="input-group">
                    <input type="search" class="form-control" placeholder="Tìm kiếm" aria-describedby="button-addon2">
                    <button class="btn btn-outline-dark" type="submit" id="button-addon2">Search</button>
                </div>
            </form>
        </div>
        <div class="col-3 position-relative text-dark">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0 position-absolute text-black" style="left: 90px;top: -20px;">
                @if (@AuthState.IsLoggedIn)
                {
                    <li class="nav-item dropdown d-flex nav-home">
                        <a class="nav-link dropdown-toggle text-start" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            @AuthState.Username
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/update-info">Đổi thông tin</a></li>
                            <li><a class="dropdown-item" href="/change-password">Đổi mật khẩu</a></li>
                            <li><a class="dropdown-item" @onclick="Logout">Đăng xuất</a></li>
                        </ul>
                    </li>
                }
                else
                {
                    <li class="nav-item dropdown d-flex nav-home">
                        <a class="nav-link dropdown-toggle text-start" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Tài khoản
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/register">Đăng ký</a></li>
                            <li><a class="dropdown-item" href="/login">Đăng nhập</a></li>
                            <li><a class="dropdown-item" href="/forget-password">Quên mật khẩu</a></li>
                        </ul>
                    </li>
                }
                <li class="nav-item">
                    <a class="nav-link text-end position-relative nav-home" role="button" @onclick="HandleCartClick">
                        Giỏ hàng
                        @if (AuthState.IsLoggedIn)
                        {
                            @if (AuthState.CartItemCount > 0)
                            {
                                <span class="position-absolute translate-middle badge rounded-pill bg-danger" style="top: 7px; right: -19px;">
                                    @AuthState.CartItemCount
                                </span>
                            }
                            else
                            {
                                <span class="position-absolute translate-middle badge rounded-pill bg-danger" style="top: 7px; right: -19px;">
                                    0
                                </span>
                            }
                        }

                    </a>
                </li>
            </ul>
            <div class="toast-container position-fixed top-0 end-0 p-3">
                <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <img src="/images/logo2.png" class="rounded me-2" alt="..." width="50px">
                        <strong class="me-auto">Thông báo</strong>
                    </div>
                    <div class="toast-body">
                        @toastMessage
                    </div>
                </div>
            </div>
        </div>
    </div>
</nav>

@code {
    private string NavbarClass = "sticky-top";
    private string toastMessage;

    protected override async Task OnInitializedAsync()
    {
        AuthState.OnChange += StateHasChanged;
        if (AuthState.IsLoggedIn)
        {
            await UpdateCartItemCount();

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeScrollHandler", DotNetObjectReference.Create(this));
            await UpdateCartItemCount();
        }
    }

    [JSInvokable]
    public void SetNavbarClass(string cssClass)
    {
        NavbarClass = cssClass;
        StateHasChanged();
    }

    private async Task HandleCartClick()
    {
        if (!AuthState.IsLoggedIn)
        {
            toastMessage = "Bạn chưa đăng nhập, bạn sẽ được chuyển đến đăng nhập sau ít giây!";
            ShowToast();
            await Task.Delay(2000);
            Navigation.NavigateTo("/login");
        }
        else
        {
            Navigation.NavigateTo("/giohang");
        }
    }
    private void ShowToast()
    {
        JS.InvokeVoidAsync("eval", "var toastElement = document.querySelector('.toast'); var toast = new bootstrap.Toast(toastElement); toast.show();");
        StateHasChanged();
    }
    private async Task UpdateCartItemCount()
    {
        if (AuthState.IsLoggedIn)
        {
            var response = await Http.GetAsync($"api/cart/items/count?username={AuthState.Username}");
            if (response.IsSuccessStatusCode)
            {
                var count = await response.Content.ReadAsStringAsync();
                AuthState.UpdateCartItemCount(int.Parse(count));
            }
            else
            {
                AuthState.UpdateCartItemCount(0);
            }
        }
        else
        {
            AuthState.UpdateCartItemCount(0);
        }
    }

    private async void Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");
        AuthState.IsLoggedIn = false;
        AuthState.Username = null;
        Navigation.NavigateTo("/");
        await UpdateCartItemCount(); // Update the cart count after logout
    }

    public void Dispose()
    {
        AuthState.OnChange -= StateHasChanged;
    }
}
